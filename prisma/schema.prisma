// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

model User {
  uuid            String    @id @default(uuid()) @db.Uuid
  name            String    @db.VarChar(255)
  email           String    @unique @db.VarChar(255)
  password        String    @db.Text()
  profileImageUrl String?   @db.VarChar(255)
  role            String    @default("user")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  friends1 Friendship[] @relation("User1Friendships")
  friends2 Friendship[] @relation("User2Friendships")

  annotations        Annotation[]             @relation("UserAnnotations")
  relatedAnnotations RelatedUserAnnotations[] @relation("UserToAnnotations")

  notifications Notification[]
  categories    Category[]

  RelatedUserAnnotations RelatedUserAnnotations[]
}

model Friendship {
  uuid    String @id @default(uuid()) @db.Uuid
  user1Id String @db.Uuid
  user1   User   @relation("User1Friendships", fields: [user1Id], references: [uuid])

  user2Id String @db.Uuid
  user2   User   @relation("User2Friendships", fields: [user2Id], references: [uuid])

  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
}

model Annotation {
  uuid      String   @id @default(uuid()) @db.Uuid
  content   String   @db.Text()
  remindAt  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String @db.Uuid
  author   User   @relation("UserAnnotations", fields: [authorId], references: [uuid])

  categoryId String?   @db.Uuid
  category   Category? @relation(fields: [categoryId], references: [uuid])

  relatedUsers RelatedUserAnnotations[] @relation("AnnotationToUsers")
}

model Category {
  uuid        String       @id @default(uuid()) @db.Uuid
  name        String       @db.VarChar(255)
  userId      String       @db.Uuid
  user        User         @relation(fields: [userId], references: [uuid])
  annotations Annotation[]
}

model Notification {
  uuid          String   @id @default(uuid()) @db.Uuid
  emailNotify   Boolean  @default(true)
  phoneNumber   String?  @db.VarChar(20)
  phoneNotify   Boolean  @default(false)
  weeklySummary Boolean  @default(false)
  enabled       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [uuid])
}

model RelatedUserAnnotations {
  annotationId String @db.Uuid
  userId       String @db.Uuid

  annotation Annotation @relation("AnnotationToUsers", fields: [annotationId], references: [uuid])
  user       User       @relation("UserToAnnotations", fields: [userId], references: [uuid])
  User       User?      @relation(fields: [userUuid], references: [uuid])
  userUuid   String?    @db.Uuid

  @@id([annotationId, userId])
}

model ErrorLogs {
  uuid       String    @id @default(uuid()) @db.Uuid
  statusCode Int       @db.Integer()
  error      String    @db.Text()
  message    String    @db.Text()
  url        String    @db.Text()
  headers    Json      @db.Json()
  method     String    @db.VarChar(200)
  stackTrace String?   @db.Text()
  userId     String?   @db.Uuid()
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  @@map("error_logs")
}
